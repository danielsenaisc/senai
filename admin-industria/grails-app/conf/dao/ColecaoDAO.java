package dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import comum.Columns;
import comum.Tables;
import entidades.Colecao;

/**
 * Colecao generated by hbm2java
 */

public class ColecaoDAO extends AbstractDAO{


	private ArrayList<Colecao> montarObjeto(ResultSet rs) throws SQLException {
        ArrayList<Colecao> listaColecao = new ArrayList<Colecao>();
        while (rs.next()) {
            Colecao objeto = new Colecao();

            BigDecimal id = rs.getBigDecimal(Columns.id);
            String nome = rs.getString(Columns.nome);
            Date vigenciaInicial = rs.getDate(Columns.vigenciaInicial);
            Date vigenciaFinal = rs.getDate(Columns.vigenciaFinal);
            String descricao = rs.getString(Columns.descricao);
            short idadeInicial = rs.getShort(Columns.idadeInicial);
            short idadeFinal = rs.getShort(Columns.idadeFinal);;
            String genero = rs.getString(Columns.genero);
            BigDecimal idLivre = rs.getBigDecimal(Columns.idLivre);
            BigDecimal marcaId = rs.getBigDecimal(Columns.marcaId);
            String status = rs.getString(Columns.status);
            
            objeto.setId(id);
            objeto.setNome(nome);
            objeto.setVigenciaInicial(vigenciaInicial);
            objeto.setVigenciaFinal(vigenciaFinal);
            objeto.setDescricao(descricao);
            objeto.setIdadeInicial(idadeInicial);
            objeto.setIdadeFinal(idadeFinal);
            objeto.setGenero(genero);
            objeto.setIdLivre(idLivre);
            objeto.setMarcaId(marcaId);
            objeto.setStatus(status);
            
            listaColecao.add(objeto);
        }
        return listaColecao;
    }
    
    public ArrayList<Colecao> select() {
        Connection connection = Conexao.getConexao();
        try {

            String sql = String.format("SELECT * FROM %s",Tables.colecao);
            PreparedStatement prest = connection.prepareStatement(sql);
            ResultSet rs = prest.executeQuery();

            ArrayList<Colecao> listaColecao = montarObjeto(rs);

            connection.close();
            return listaColecao;
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return null;
    }
    
    public ArrayList<Colecao> select(String column, Object param) {
        Connection connection = Conexao.getConexao();
        try {

        	String sql = String.format("SELECT * FROM %s WHERE %s like ?", Tables.colecao, column);
            PreparedStatement prest = connection.prepareStatement(sql);
            prest.setObject(1, param);
            ResultSet rs = prest.executeQuery();

            ArrayList<Colecao> listaColecao = montarObjeto(rs);

            connection.close();
            return listaColecao;
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        return null;
    }
    
    public Colecao selectById(BigDecimal id) {
    	return select(Columns.id, id).get(0);
    }

    public ArrayList<Colecao> selectByNome(String nome) {
    	return select(Columns.nome, nome);
    }
    
    public void insert(Colecao colecao) {
        String sql = String.format("insert into %s (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) values (?,?,?,?,?,?,?,?,?,?)", 
        		Tables.colecao, 
        		Columns.nome, Columns.vigenciaInicial, Columns.vigenciaFinal, Columns.descricao, Columns.idadeInicial, Columns.idadeFinal, Columns.genero, Columns.idLivre, Columns.marcaId, Columns.status);
        ArrayList<Object> params = new ArrayList<Object>();
        params.add(colecao.getDescricao());            
        operacaoEscrita(sql, params);
    }

    public void update(Colecao colecao) {
        	String sql = String.format("UPDATE %s SET %s = ?, %s = ?, %s = ?, %s = ?, %s = ?, %s = ?, %s = ?, %s = ?, %s = ?, %s = ? WHERE %s = ?", 
        			Tables.colecao, 
        			Columns.nome, Columns.vigenciaInicial, Columns.vigenciaFinal, Columns.descricao, Columns.idadeInicial, Columns.idadeFinal, Columns.genero, Columns.idLivre, Columns.marcaId, Columns.status, Columns.id);

            ArrayList<Object> params = new ArrayList<Object>();
            
            params.add(colecao.getNome());
            params.add(colecao.getVigenciaInicial());
            params.add(colecao.getVigenciaFinal());
            params.add(colecao.getDescricao());
            params.add(colecao.getIdadeInicial());
            params.add(colecao.getIdadeFinal());
            params.add(colecao.getGenero());
            params.add(colecao.getIdLivre());
            params.add(colecao.getMarcaId());
            params.add(colecao.getStatus());
            
            operacaoEscrita(sql, params);
    }
    
    public void delete(Colecao colecao) {
            ArrayList<Object> params = new ArrayList<Object>();
            params.add(colecao.getId());
            delete(Tables.colecao, Columns.id, params);
    }
    
    public void deleteById(BigDecimal id) {
        ArrayList<Object> params = new ArrayList<Object>();
        params.add(id);
        delete(Tables.colecao, Columns.id, params);
	}
	
	public void deleteByNome(String nome) {
		ArrayList<Object> params = new ArrayList<Object>();
        params.add(nome);
        delete(Tables.colecao, Columns.nome, params);
	}

}

